

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 vertex_v;
varying vec3 normal_v;

void main() {
    vertex_v = vertex;
    normal_v = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vertex_v;
varying vec3 normal_v;
uniform vec4 color;
uniform vec3 lightLocation;
uniform vec3 lightDirection;
uniform float angle, focus;
void main() {
    vec3 toLight = normalize(lightLocation+vertex_v);
    vec3 toView = normalize(vertex_v);
    vec3 halfVector = normalize(toLight + toView);
    vec3 N = -normalize(normal_v);
    float dotFromDirection = dot(toLight, 
                               -lightDirection);
    float inLight = smoothstep(angle,angle+focus, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 150.0);
    vec3 newColor = color.rgb*light+specular;
    gl_FragColor = vec4(newColor,1.0);
    if(angle<0.0){
         gl_FragColor = vec4(1.0);
    }
}`;